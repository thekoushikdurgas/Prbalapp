{
    "info": {
        "name": "Service Request API - Complete Collection",
        "description": "Complete collection for testing ServiceRequestViewSet endpoints with standardized responses format: {message, data, time, statusCode}",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
        {
            "name": "1. List Service Requests",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "// Test standardized response format",
                            "pm.test('Response has standardized format', function () {",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData).to.have.property('message');",
                            "    pm.expect(jsonData).to.have.property('data');", 
                            "    pm.expect(jsonData).to.have.property('time');",
                            "    pm.expect(jsonData).to.have.property('statusCode');",
                            "});",
                            "",
                            "pm.test('Status code is 200', function () {",
                            "    pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test('Message indicates success', function () {",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.message).to.include('Service requests retrieved successfully');",
                            "});",
                            "",
                            "pm.test('Data contains service_requests or requests array', function () {",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.data).to.satisfy(function(data) {",
                            "        return data.hasOwnProperty('service_requests') || Array.isArray(data);",
                            "    });",
                            "});"
                        ]
                    }
                }
            ],
            "request": {
                "method": "GET",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "url": {
                    "raw": "{{base_url}}/api/services/requests/",
                    "host": ["{{base_url}}"],
                    "path": ["api", "services", "requests", ""]
                },
                "description": "List all open service requests. Returns paginated results with summary information."
            },
            "response": [
                {
                    "name": "200 Success - List Retrieved",
                    "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": "{{base_url}}/api/services/requests/"
                    },
                    "status": "OK",
                    "code": 200,
                    "_postman_previewlanguage": "json",
                    "header": [
                        {"key": "Content-Type", "value": "application/json"}
                    ],
                    "cookie": [],
                    "body": "{\n    \"message\": \"Service requests retrieved successfully\",\n    \"data\": {\n        \"service_requests\": [\n            {\n                \"id\": \"uuid-here\",\n                \"customer\": {\n                    \"id\": \"customer-uuid\",\n                    \"username\": \"customer1\",\n                    \"email\": \"customer@example.com\"\n                },\n                \"title\": \"Need help with plumbing\",\n                \"description\": \"Kitchen sink is leaking badly\",\n                \"category\": \"plumbing-uuid\",\n                \"category_name\": \"Plumbing\",\n                \"status\": \"open\",\n                \"status_display\": \"Open\",\n                \"urgency\": \"high\",\n                \"urgency_display\": \"High - Within 48 hours\",\n                \"location\": \"123 Main St, City\",\n                \"budget_min\": 100.00,\n                \"budget_max\": 500.00,\n                \"currency\": \"INR\",\n                \"is_featured\": false,\n                \"created_at\": \"2024-01-20T10:30:00Z\",\n                \"expires_at\": \"2024-02-20T10:30:00Z\"\n            }\n        ],\n        \"summary\": {\n            \"total_count\": 1,\n            \"filters_applied\": [],\n            \"retrieved_at\": \"2024-01-20T15:30:00Z\"\n        }\n    },\n    \"time\": \"2024-01-20T15:30:00Z\",\n    \"statusCode\": 200\n}"
                }
            ]
        },
        {
            "name": "2. Create Service Request",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "// Test standardized response format",
                            "pm.test('Response has standardized format', function () {",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData).to.have.property('message');",
                            "    pm.expect(jsonData).to.have.property('data');",
                            "    pm.expect(jsonData).to.have.property('time');",
                            "    pm.expect(jsonData).to.have.property('statusCode');",
                            "});",
                            "",
                            "pm.test('Status code is 201 for successful creation', function () {",
                            "    pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test('Message indicates successful creation', function () {",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.message).to.include('created successfully');",
                            "});",
                            "",
                            "pm.test('Data contains service_request and creation_details', function () {",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.data).to.have.property('service_request');",
                            "    pm.expect(jsonData.data).to.have.property('creation_details');",
                            "});",
                            "",
                            "// Store the created request ID for other tests",
                            "if (pm.response.code === 201) {",
                            "    const jsonData = pm.response.json();",
                            "    if (jsonData.data && jsonData.data.service_request && jsonData.data.service_request.id) {",
                            "        pm.environment.set('service_request_id', jsonData.data.service_request.id);",
                            "    }",
                            "}"
                        ]
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type", 
                        "value": "application/json"
                    },
                    {
                        "key": "Authorization",
                        "value": "Bearer {{customer_token}}",
                        "description": "Customer authentication required"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n    \"title\": \"Need urgent plumbing help\",\n    \"description\": \"Kitchen sink is completely blocked and water is overflowing. Need immediate help.\",\n    \"category\": \"{{category_id}}\",\n    \"subcategories\": [],\n    \"budget_min\": 500.00,\n    \"budget_max\": 1500.00,\n    \"currency\": \"INR\",\n    \"urgency\": \"urgent\",\n    \"requested_date_time\": \"2024-01-21T09:00:00Z\",\n    \"location\": \"123 Emergency Lane, Urgent City\",\n    \"latitude\": 28.6139,\n    \"longitude\": 77.2090,\n    \"requirements\": {\n        \"tools_needed\": [\"drain_snake\", \"plunger\"],\n        \"access_requirements\": \"apartment_building\",\n        \"preferred_time\": \"morning\"\n    }\n}"
                },
                "url": {
                    "raw": "{{base_url}}/api/services/requests/",
                    "host": ["{{base_url}}"],
                    "path": ["api", "services", "requests", ""]
                },
                "description": "Create a new service request. Requires customer authentication."
            },
            "response": [
                {
                    "name": "201 Success - Request Created",
                    "originalRequest": {
                        "method": "POST",
                        "header": [
                            {"key": "Content-Type", "value": "application/json"},
                            {"key": "Authorization", "value": "Bearer customer-token"}
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"title\": \"Need urgent plumbing help\",\n    \"description\": \"Kitchen sink is completely blocked\",\n    \"category\": \"category-uuid\",\n    \"budget_min\": 500.00,\n    \"budget_max\": 1500.00,\n    \"urgency\": \"urgent\",\n    \"location\": \"123 Emergency Lane\"\n}"
                        },
                        "url": "{{base_url}}/api/services/requests/"
                    },
                    "status": "Created",
                    "code": 201,
                    "_postman_previewlanguage": "json", 
                    "header": [
                        {"key": "Content-Type", "value": "application/json"}
                    ],
                    "cookie": [],
                    "body": "{\n    \"message\": \"Service request 'Need urgent plumbing help' created successfully\",\n    \"data\": {\n        \"service_request\": {\n            \"id\": \"new-request-uuid\",\n            \"title\": \"Need urgent plumbing help\",\n            \"description\": \"Kitchen sink is completely blocked\",\n            \"category\": \"category-uuid\",\n            \"budget_min\": 500.00,\n            \"budget_max\": 1500.00,\n            \"currency\": \"INR\",\n            \"urgency\": \"urgent\",\n            \"location\": \"123 Emergency Lane\"\n        },\n        \"creation_details\": {\n            \"created_by\": \"customer1\",\n            \"created_at\": \"2024-01-20T15:30:00Z\",\n            \"category_name\": \"Plumbing\",\n            \"request_id\": \"new-request-uuid\",\n            \"status\": \"open\",\n            \"expires_at\": \"2024-02-20T15:30:00Z\"\n        }\n    },\n    \"time\": \"2024-01-20T15:30:00Z\",\n    \"statusCode\": 201\n}"
                },
                {
                    "name": "400 Validation Error",
                    "originalRequest": {
                        "method": "POST", 
                        "header": [
                            {"key": "Content-Type", "value": "application/json"},
                            {"key": "Authorization", "value": "Bearer customer-token"}
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"title\": \"\",\n    \"description\": \"Invalid request\"\n}"
                        },
                        "url": "{{base_url}}/api/services/requests/"
                    },
                    "status": "Bad Request",
                    "code": 400,
                    "_postman_previewlanguage": "json",
                    "header": [
                        {"key": "Content-Type", "value": "application/json"}
                    ],
                    "cookie": [],
                    "body": "{\n    \"message\": \"Service request validation failed\",\n    \"data\": {\n        \"validation_errors\": {\n            \"title\": [\"This field may not be blank.\"],\n            \"category\": [\"This field is required.\"]\n        },\n        \"provided_data\": {\n            \"title\": \"\",\n            \"description\": \"Invalid request\"\n        },\n        \"error_type\": \"validation_error\"\n    },\n    \"time\": \"2024-01-20T15:30:00Z\",\n    \"statusCode\": 400\n}"
                },
                {
                    "name": "403 Permission Denied - Not Customer",
                    "originalRequest": {
                        "method": "POST",
                        "header": [
                            {"key": "Content-Type", "value": "application/json"},
                            {"key": "Authorization", "value": "Bearer provider-token"}
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"title\": \"Test request\",\n    \"category\": \"test-category\"\n}"
                        },
                        "url": "{{base_url}}/api/services/requests/"
                    },
                    "status": "Forbidden",
                    "code": 403,
                    "_postman_previewlanguage": "json",
                    "header": [
                        {"key": "Content-Type", "value": "application/json"}
                    ],
                    "cookie": [],
                    "body": "{\n    \"message\": \"Only customers can create or modify service requests.\",\n    \"data\": {\n        \"error_type\": \"permission_denied\",\n        \"required_user_type\": \"customer\",\n        \"current_user_type\": \"provider\"\n    },\n    \"time\": \"2024-01-20T15:30:00Z\",\n    \"statusCode\": 403\n}"
                }
            ]
        },
        {
            "name": "3. Retrieve Service Request",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test('Status code is 200', function () {",
                            "    pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test('Message indicates successful retrieval', function () {",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.message).to.include('retrieved successfully');",
                            "});",
                            "",
                            "pm.test('Data contains service_request and access_details', function () {",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.data).to.have.property('service_request');",
                            "    pm.expect(jsonData.data).to.have.property('access_details');",
                            "});"
                        ]
                    }
                }
            ],
            "request": {
                "method": "GET",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "url": {
                    "raw": "{{base_url}}/api/services/requests/{{service_request_id}}/",
                    "host": ["{{base_url}}"],
                    "path": ["api", "services", "requests", "{{service_request_id}}", ""]
                },
                "description": "Retrieve detailed information about a specific service request."
            },
            "response": [
                {
                    "name": "200 Success - Request Retrieved",
                    "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": "{{base_url}}/api/services/requests/{{service_request_id}}/"
                    },
                    "status": "OK",
                    "code": 200,
                    "_postman_previewlanguage": "json",
                    "header": [
                        {"key": "Content-Type", "value": "application/json"}
                    ],
                    "cookie": [],
                    "body": "{\n    \"message\": \"Service request 'Need urgent plumbing help' retrieved successfully\",\n    \"data\": {\n        \"service_request\": {\n            \"id\": \"request-uuid\",\n            \"customer\": {\n                \"id\": \"customer-uuid\",\n                \"username\": \"customer1\",\n                \"email\": \"customer@example.com\"\n            },\n            \"title\": \"Need urgent plumbing help\",\n            \"description\": \"Kitchen sink is completely blocked\",\n            \"category\": {\n                \"id\": \"category-uuid\",\n                \"name\": \"Plumbing\"\n            },\n            \"subcategories\": [],\n            \"budget_min\": 500.00,\n            \"budget_max\": 1500.00,\n            \"currency\": \"INR\",\n            \"urgency\": \"urgent\",\n            \"urgency_display\": \"Urgent - Within 24 hours\",\n            \"status\": \"open\",\n            \"status_display\": \"Open\",\n            \"assigned_provider\": null,\n            \"fulfilled_by_service\": null,\n            \"created_at\": \"2024-01-20T15:30:00Z\",\n            \"updated_at\": \"2024-01-20T15:30:00Z\"\n        },\n        \"access_details\": {\n            \"accessed_by\": \"Anonymous\",\n            \"accessed_at\": \"2024-01-20T16:00:00Z\",\n            \"customer_name\": \"customer1\",\n            \"category_name\": \"Plumbing\",\n            \"request_status\": \"open\",\n            \"urgency\": \"urgent\"\n        }\n    },\n    \"time\": \"2024-01-20T16:00:00Z\",\n    \"statusCode\": 200\n}"
                },
                {
                    "name": "404 Not Found",
                    "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": "{{base_url}}/api/services/requests/invalid-uuid/"
                    },
                    "status": "Not Found",
                    "code": 404,
                    "_postman_previewlanguage": "json",
                    "header": [
                        {"key": "Content-Type", "value": "application/json"}
                    ],
                    "cookie": [],
                    "body": "{\n    \"message\": \"Service request not found\",\n    \"data\": {\n        \"request_id\": \"invalid-uuid\",\n        \"error_type\": \"not_found\",\n        \"user_id\": null\n    },\n    \"time\": \"2024-01-20T16:00:00Z\",\n    \"statusCode\": 404\n}"
                }
            ]
        },
        {
            "name": "4. Update Service Request (PUT)",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test('Status code is 200', function () {",
                            "    pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test('Message indicates successful update', function () {",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.message).to.include('updated successfully');",
                            "});",
                            "",
                            "pm.test('Data contains update details', function () {",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.data).to.have.property('service_request');",
                            "    pm.expect(jsonData.data).to.have.property('update_details');",
                            "});"
                        ]
                    }
                }
            ],
            "request": {
                "method": "PUT",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    },
                    {
                        "key": "Authorization",
                        "value": "Bearer {{customer_token}}",
                        "description": "Owner authentication required"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n    \"title\": \"Updated: Need urgent plumbing help\",\n    \"description\": \"Kitchen sink is completely blocked and water is overflowing. Updated description with more details.\",\n    \"category\": \"{{category_id}}\",\n    \"subcategories\": [],\n    \"budget_min\": 600.00,\n    \"budget_max\": 2000.00,\n    \"currency\": \"INR\",\n    \"urgency\": \"urgent\",\n    \"location\": \"123 Updated Emergency Lane, Urgent City\",\n    \"requirements\": {\n        \"tools_needed\": [\"drain_snake\", \"plunger\", \"wrench\"],\n        \"access_requirements\": \"apartment_building\",\n        \"preferred_time\": \"morning\"\n    }\n}"
                },
                "url": {
                    "raw": "{{base_url}}/api/services/requests/{{service_request_id}}/",
                    "host": ["{{base_url}}"],
                    "path": ["api", "services", "requests", "{{service_request_id}}", ""]
                },
                "description": "Update an existing service request. Requires owner authentication."
            },
            "response": [
                {
                    "name": "200 Success - Request Updated",
                    "originalRequest": {
                        "method": "PUT",
                        "header": [
                            {"key": "Content-Type", "value": "application/json"},
                            {"key": "Authorization", "value": "Bearer customer-token"}
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"title\": \"Updated: Need urgent plumbing help\",\n    \"budget_min\": 600.00,\n    \"budget_max\": 2000.00\n}"
                        },
                        "url": "{{base_url}}/api/services/requests/{{service_request_id}}/"
                    },
                    "status": "OK",
                    "code": 200,
                    "_postman_previewlanguage": "json",
                    "header": [
                        {"key": "Content-Type", "value": "application/json"}
                    ],
                    "cookie": [],
                    "body": "{\n    \"message\": \"Service request 'Updated: Need urgent plumbing help' updated successfully\",\n    \"data\": {\n        \"service_request\": {\n            \"id\": \"request-uuid\",\n            \"title\": \"Updated: Need urgent plumbing help\",\n            \"budget_min\": 600.00,\n            \"budget_max\": 2000.00,\n            \"updated_at\": \"2024-01-20T16:30:00Z\"\n        },\n        \"update_details\": {\n            \"updated_by\": \"customer1\",\n            \"updated_at\": \"2024-01-20T16:30:00Z\",\n            \"changes_made\": [\n                \"title: 'Need urgent plumbing help' → 'Updated: Need urgent plumbing help'\",\n                \"budget_min: 500.0 → 600.0\",\n                \"budget_max: 1500.0 → 2000.0\"\n            ],\n            \"category_name\": \"Plumbing\",\n            \"request_id\": \"request-uuid\"\n        }\n    },\n    \"time\": \"2024-01-20T16:30:00Z\",\n    \"statusCode\": 200\n}"
                },
                {
                    "name": "403 Permission Denied - Not Owner",
                    "originalRequest": {
                        "method": "PUT",
                        "header": [
                            {"key": "Content-Type", "value": "application/json"},
                            {"key": "Authorization", "value": "Bearer other-customer-token"}
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"title\": \"Unauthorized update\"\n}"
                        },
                        "url": "{{base_url}}/api/services/requests/{{service_request_id}}/"
                    },
                    "status": "Forbidden",
                    "code": 403,
                    "_postman_previewlanguage": "json",
                    "header": [
                        {"key": "Content-Type", "value": "application/json"}
                    ],
                    "cookie": [],
                    "body": "{\n    \"message\": \"You must be the owner of this object to perform this action.\",\n    \"data\": {\n        \"error_type\": \"permission_denied\",\n        \"required_permission\": \"owner\",\n        \"request_id\": \"request-uuid\"\n    },\n    \"time\": \"2024-01-20T16:30:00Z\",\n    \"statusCode\": 403\n}"
                }
            ]
        },
        {
            "name": "5. Partial Update Service Request (PATCH)",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test('Status code is 200', function () {",
                            "    pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test('Message indicates successful partial update', function () {",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.message).to.include('partially updated successfully');",
                            "});",
                            "",
                            "pm.test('Data contains partial update details', function () {",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.data).to.have.property('service_request');",
                            "    pm.expect(jsonData.data).to.have.property('partial_update_details');",
                            "});"
                        ]
                    }
                }
            ],
            "request": {
                "method": "PATCH",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    },
                    {
                        "key": "Authorization",
                        "value": "Bearer {{customer_token}}",
                        "description": "Owner authentication required"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n    \"urgency\": \"high\",\n    \"budget_max\": 1800.00\n}"
                },
                "url": {
                    "raw": "{{base_url}}/api/services/requests/{{service_request_id}}/",
                    "host": ["{{base_url}}"],
                    "path": ["api", "services", "requests", "{{service_request_id}}", ""]
                },
                "description": "Partially update a service request. Only provided fields are updated."
            },
            "response": [
                {
                    "name": "200 Success - Request Partially Updated", 
                    "originalRequest": {
                        "method": "PATCH",
                        "header": [
                            {"key": "Content-Type", "value": "application/json"},
                            {"key": "Authorization", "value": "Bearer customer-token"}
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"urgency\": \"high\",\n    \"budget_max\": 1800.00\n}"
                        },
                        "url": "{{base_url}}/api/services/requests/{{service_request_id}}/"
                    },
                    "status": "OK",
                    "code": 200,
                    "_postman_previewlanguage": "json",
                    "header": [
                        {"key": "Content-Type", "value": "application/json"}
                    ],
                    "cookie": [],
                    "body": "{\n    \"message\": \"Service request 'Updated: Need urgent plumbing help' partially updated successfully\",\n    \"data\": {\n        \"service_request\": {\n            \"id\": \"request-uuid\",\n            \"urgency\": \"high\",\n            \"budget_max\": 1800.00,\n            \"updated_at\": \"2024-01-20T17:00:00Z\"\n        },\n        \"partial_update_details\": {\n            \"updated_by\": \"customer1\",\n            \"updated_at\": \"2024-01-20T17:00:00Z\",\n            \"fields_updated\": [\"urgency\", \"budget_max\"],\n            \"changes_made\": [\n                \"urgency: urgent → high\",\n                \"budget_max: 2000.0 → 1800.0\"\n            ],\n            \"category_name\": \"Plumbing\",\n            \"request_id\": \"request-uuid\"\n        }\n    },\n    \"time\": \"2024-01-20T17:00:00Z\",\n    \"statusCode\": 200\n}"
                }
                         ]
         },
         {
            "name": "6. Delete Service Request",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test('Status code is 204', function () {",
                            "    pm.response.to.have.status(204);",
                            "});",
                            "",
                            "pm.test('Message indicates successful deletion', function () {",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.message).to.include('deleted successfully');",
                            "});",
                            "",
                            "pm.test('Data contains deletion details', function () {",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.data).to.have.property('deleted_service_request');",
                            "    pm.expect(jsonData.data).to.have.property('impact_analysis');",
                            "});"
                        ]
                    }
                }
            ],
            "request": {
                "method": "DELETE",
                "header": [
                    {
                        "key": "Authorization",
                        "value": "Bearer {{customer_token}}",
                        "description": "Owner authentication required"
                    }
                ],
                "url": {
                    "raw": "{{base_url}}/api/services/requests/{{service_request_id}}/",
                    "host": ["{{base_url}}"],
                    "path": ["api", "services", "requests", "{{service_request_id}}", ""]
                },
                "description": "Delete a service request. Requires owner authentication."
            },
            "response": [
                {
                    "name": "204 Success - Request Deleted",
                    "originalRequest": {
                        "method": "DELETE",
                        "header": [
                            {"key": "Authorization", "value": "Bearer customer-token"}
                        ],
                        "url": "{{base_url}}/api/services/requests/{{service_request_id}}/"
                    },
                    "status": "No Content",
                    "code": 204,
                    "_postman_previewlanguage": "json",
                    "header": [
                        {"key": "Content-Type", "value": "application/json"}
                    ],
                    "cookie": [],
                    "body": "{\n    \"message\": \"Service request 'Need urgent plumbing help' deleted successfully\",\n    \"data\": {\n        \"deleted_service_request\": {\n            \"id\": \"request-uuid\",\n            \"title\": \"Need urgent plumbing help\",\n            \"customer_name\": \"customer1\",\n            \"category_name\": \"Plumbing\",\n            \"budget_range\": \"500.0-1500.0 INR\",\n            \"status\": \"open\",\n            \"urgency\": \"urgent\"\n        },\n        \"impact_analysis\": {\n            \"assigned_provider\": null,\n            \"fulfilled_by_service\": null,\n            \"was_in_progress\": false\n        },\n        \"deletion_metadata\": {\n            \"deleted_by\": \"customer1\",\n            \"deleted_at\": \"2024-01-20T17:30:00Z\",\n            \"deletion_type\": \"owner_action\"\n        }\n    },\n    \"time\": \"2024-01-20T17:30:00Z\",\n    \"statusCode\": 204\n}"
                }
            ]
        },
        {
            "name": "7. My Requests (Customer Only)",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test('Status code is 200', function () {",
                            "    pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test('Message indicates customer requests retrieved', function () {",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.message).to.include('Customer service requests retrieved successfully');",
                            "});",
                            "",
                            "pm.test('Data contains requests and summary', function () {",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.data).to.have.property('requests');",
                            "    pm.expect(jsonData.data).to.have.property('summary');",
                            "});"
                        ]
                    }
                }
            ],
            "request": {
                "method": "GET",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    },
                    {
                        "key": "Authorization",
                        "value": "Bearer {{customer_token}}",
                        "description": "Customer authentication required"
                    }
                ],
                "url": {
                    "raw": "{{base_url}}/api/services/requests/my_requests/?status=open",
                    "host": ["{{base_url}}"],
                    "path": ["api", "services", "requests", "my_requests", ""],
                    "query": [
                        {
                            "key": "status",
                            "value": "open",
                            "description": "Filter by status (optional)"
                        }
                    ]
                },
                "description": "Get all service requests for the authenticated customer."
            },
            "response": [
                {
                    "name": "200 Success - Customer Requests",
                    "originalRequest": {
                        "method": "GET",
                        "header": [
                            {"key": "Authorization", "value": "Bearer customer-token"}
                        ],
                        "url": "{{base_url}}/api/services/requests/my_requests/"
                    },
                    "status": "OK",
                    "code": 200,
                    "_postman_previewlanguage": "json",
                    "header": [
                        {"key": "Content-Type", "value": "application/json"}
                    ],
                    "cookie": [],
                    "body": "{\n    \"message\": \"Customer service requests retrieved successfully\",\n    \"data\": {\n        \"requests\": [\n            {\n                \"id\": \"request-uuid\",\n                \"title\": \"Need urgent plumbing help\",\n                \"status\": \"open\",\n                \"urgency\": \"urgent\",\n                \"created_at\": \"2024-01-20T15:30:00Z\"\n            }\n        ],\n        \"summary\": {\n            \"total_count\": 1,\n            \"initial_count\": 3,\n            \"filters_applied\": [\"status=open\"],\n            \"customer_id\": \"customer-uuid\",\n            \"retrieved_at\": \"2024-01-20T18:00:00Z\"\n        }\n    },\n    \"time\": \"2024-01-20T18:00:00Z\",\n    \"statusCode\": 200\n}"
                },
                {
                    "name": "403 Permission Denied - Not Customer",
                    "originalRequest": {
                        "method": "GET",
                        "header": [
                            {"key": "Authorization", "value": "Bearer provider-token"}
                        ],
                        "url": "{{base_url}}/api/services/requests/my_requests/"
                    },
                    "status": "Forbidden",
                    "code": 403,
                    "_postman_previewlanguage": "json",
                    "header": [
                        {"key": "Content-Type", "value": "application/json"}
                    ],
                    "cookie": [],
                    "body": "{\n    \"message\": \"You do not have permission to access this endpoint\",\n    \"data\": {\n        \"required_user_type\": \"customer\",\n        \"current_user_type\": \"provider\"\n    },\n    \"time\": \"2024-01-20T18:00:00Z\",\n    \"statusCode\": 403\n}"
                }
            ]
        },
        {
            "name": "8. Admin View (Admin Only)",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test('Status code is 200', function () {",
                            "    pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test('Message indicates admin requests retrieved', function () {",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.message).to.include('Admin service requests retrieved successfully');",
                            "});",
                            "",
                            "pm.test('Data contains service_requests and query_summary', function () {",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.data).to.have.property('service_requests');",
                            "    pm.expect(jsonData.data).to.have.property('query_summary');",
                            "});"
                        ]
                    }
                }
            ],
            "request": {
                "method": "GET",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    },
                    {
                        "key": "Authorization",
                        "value": "Bearer {{admin_token}}",
                        "description": "Admin authentication required"
                    }
                ],
                "url": {
                    "raw": "{{base_url}}/api/services/requests/admin/?status=open&category={{category_id}}",
                    "host": ["{{base_url}}"],
                    "path": ["api", "services", "requests", "admin", ""],
                    "query": [
                        {
                            "key": "status",
                            "value": "open",
                            "description": "Filter by status (optional)"
                        },
                        {
                            "key": "category",
                            "value": "{{category_id}}",
                            "description": "Filter by category (optional)"
                        }
                    ]
                },
                "description": "Get all service requests for admin management (all statuses)."
            },
            "response": [
                {
                    "name": "200 Success - Admin View",
                    "originalRequest": {
                        "method": "GET",
                        "header": [
                            {"key": "Authorization", "value": "Bearer admin-token"}
                        ],
                        "url": "{{base_url}}/api/services/requests/admin/"
                    },
                    "status": "OK",
                    "code": 200,
                    "_postman_previewlanguage": "json",
                    "header": [
                        {"key": "Content-Type", "value": "application/json"}
                    ],
                    "cookie": [],
                    "body": "{\n    \"message\": \"Admin service requests retrieved successfully\",\n    \"data\": {\n        \"service_requests\": [\n            {\n                \"id\": \"request-uuid\",\n                \"title\": \"Need urgent plumbing help\",\n                \"customer\": {\n                    \"id\": \"customer-uuid\",\n                    \"username\": \"customer1\"\n                },\n                \"status\": \"open\",\n                \"urgency\": \"urgent\",\n                \"created_at\": \"2024-01-20T15:30:00Z\"\n            }\n        ],\n        \"query_summary\": {\n            \"total_count\": 1,\n            \"initial_count\": 5,\n            \"filters_applied\": [\"status=open\"],\n            \"requested_by\": \"admin1\",\n            \"retrieved_at\": \"2024-01-20T18:30:00Z\"\n        }\n    },\n    \"time\": \"2024-01-20T18:30:00Z\",\n    \"statusCode\": 200\n}"
                },
                {
                    "name": "403 Permission Denied - Not Admin",
                    "originalRequest": {
                        "method": "GET",
                        "header": [
                            {"key": "Authorization", "value": "Bearer customer-token"}
                        ],
                        "url": "{{base_url}}/api/services/requests/admin/"
                    },
                    "status": "Forbidden",
                    "code": 403,
                    "_postman_previewlanguage": "json",
                    "header": [
                        {"key": "Content-Type", "value": "application/json"}
                    ],
                    "cookie": [],
                    "body": "{\n    \"message\": \"You do not have permission to access this endpoint\",\n    \"data\": {\n        \"required_permission\": \"admin\",\n        \"user_type\": \"customer\"\n    },\n    \"time\": \"2024-01-20T18:30:00Z\",\n    \"statusCode\": 403\n}"
                }
                         ]
         },
         {
            "name": "9. Get Recommended Providers",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test('Status code is 200', function () {",
                            "    pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test('Message indicates providers found', function () {",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.message).to.include('recommended providers');",
                            "});",
                            "",
                            "pm.test('Data contains providers and recommendation criteria', function () {",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.data).to.have.property('recommended_providers');",
                            "    pm.expect(jsonData.data).to.have.property('recommendation_criteria');",
                            "});"
                        ]
                    }
                }
            ],
            "request": {
                "method": "GET",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    },
                    {
                        "key": "Authorization",
                        "value": "Bearer {{customer_token}}",
                        "description": "Customer (owner) or Admin authentication required"
                    }
                ],
                "url": {
                    "raw": "{{base_url}}/api/services/requests/{{service_request_id}}/recommended_providers/",
                    "host": ["{{base_url}}"],
                    "path": ["api", "services", "requests", "{{service_request_id}}", "recommended_providers", ""]
                },
                "description": "Get recommended providers for a specific service request."
            },
            "response": [
                {
                    "name": "200 Success - Providers Found",
                    "originalRequest": {
                        "method": "GET",
                        "header": [
                            {"key": "Authorization", "value": "Bearer customer-token"}
                        ],
                        "url": "{{base_url}}/api/services/requests/{{service_request_id}}/recommended_providers/"
                    },
                    "status": "OK",
                    "code": 200,
                    "_postman_previewlanguage": "json",
                    "header": [
                        {"key": "Content-Type", "value": "application/json"}
                    ],
                    "cookie": [],
                    "body": "{\n    \"message\": \"Found 3 recommended providers for your request\",\n    \"data\": {\n        \"service_request\": {\n            \"id\": \"request-uuid\",\n            \"title\": \"Need urgent plumbing help\",\n            \"category\": {\n                \"id\": \"category-uuid\",\n                \"name\": \"Plumbing\"\n            }\n        },\n        \"recommended_providers\": [\n            {\n                \"id\": \"provider-uuid-1\",\n                \"username\": \"plumber_pro\",\n                \"email\": \"plumber@example.com\",\n                \"user_type\": \"provider\"\n            },\n            {\n                \"id\": \"provider-uuid-2\",\n                \"username\": \"fix_it_fast\",\n                \"email\": \"fixitfast@example.com\",\n                \"user_type\": \"provider\"\n            }\n        ],\n        \"recommendation_criteria\": {\n            \"category\": \"Plumbing\",\n            \"provider_requirements\": {\n                \"user_type\": \"provider\",\n                \"service_status\": \"active\",\n                \"category_match\": true\n            },\n            \"sorting\": \"most_recent_activity\",\n            \"location\": \"123 Emergency Lane\"\n        },\n        \"recommendation_summary\": {\n            \"total_providers\": 3,\n            \"request_id\": \"request-uuid\",\n            \"generated_at\": \"2024-01-20T19:00:00Z\"\n        }\n    },\n    \"time\": \"2024-01-20T19:00:00Z\",\n    \"statusCode\": 200\n}"
                },
                {
                    "name": "403 Permission Denied - Not Owner",
                    "originalRequest": {
                        "method": "GET",
                        "header": [
                            {"key": "Authorization", "value": "Bearer other-customer-token"}
                        ],
                        "url": "{{base_url}}/api/services/requests/{{service_request_id}}/recommended_providers/"
                    },
                    "status": "Forbidden",
                    "code": 403,
                    "_postman_previewlanguage": "json",
                    "header": [
                        {"key": "Content-Type", "value": "application/json"}
                    ],
                    "cookie": [],
                    "body": "{\n    \"message\": \"You do not have permission to view provider recommendations for this request\",\n    \"data\": {\n        \"request_id\": \"request-uuid\",\n        \"owner_id\": \"owner-uuid\",\n        \"requester_id\": \"other-customer-uuid\",\n        \"error_type\": \"permission_denied\"\n    },\n    \"time\": \"2024-01-20T19:00:00Z\",\n    \"statusCode\": 403\n}"
                }
            ]
        },
        {
            "name": "10. Batch Expire Requests (Admin Only)",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test('Status code is 200', function () {",
                            "    pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test('Message indicates batch operation completed', function () {",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.message).to.include('expired');",
                            "});",
                            "",
                            "pm.test('Data contains operation details', function () {",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.data).to.have.property('operation');",
                            "    pm.expect(jsonData.data).to.have.property('expired_count');",
                            "});"
                        ]
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    },
                    {
                        "key": "Authorization",
                        "value": "Bearer {{admin_token}}",
                        "description": "Admin authentication required"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{}"
                },
                "url": {
                    "raw": "{{base_url}}/api/services/requests/batch_expire/",
                    "host": ["{{base_url}}"],
                    "path": ["api", "services", "requests", "batch_expire", ""]
                },
                "description": "Expire all service requests that have passed their expiration date (Admin only)."
            },
            "response": [
                {
                    "name": "200 Success - Requests Expired",
                    "originalRequest": {
                        "method": "POST",
                        "header": [
                            {"key": "Authorization", "value": "Bearer admin-token"}
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{}"
                        },
                        "url": "{{base_url}}/api/services/requests/batch_expire/"
                    },
                    "status": "OK",
                    "code": 200,
                    "_postman_previewlanguage": "json",
                    "header": [
                        {"key": "Content-Type", "value": "application/json"}
                    ],
                    "cookie": [],
                    "body": "{\n    \"message\": \"Successfully expired 5 service requests\",\n    \"data\": {\n        \"operation\": \"batch_expire_service_requests\",\n        \"expired_count\": 5,\n        \"operation_summary\": {\n            \"initial_count\": 5,\n            \"processed_count\": 5,\n            \"performed_by\": \"admin1\",\n            \"admin_id\": \"admin-uuid\",\n            \"timestamp\": \"2024-01-20T19:30:00Z\"\n        },\n        \"search_criteria\": {\n            \"status\": \"open\",\n            \"expires_before\": \"2024-01-20T19:30:00Z\"\n        },\n        \"audit_trail\": {\n            \"operation_type\": \"batch_status_update\",\n            \"old_status\": \"open\",\n            \"new_status\": \"expired\",\n            \"processed_requests\": [\n                {\n                    \"request_id\": \"expired-request-1\",\n                    \"title\": \"Old plumbing request\",\n                    \"customer_id\": \"customer-uuid-1\",\n                    \"expired_at\": \"2024-01-15T10:00:00Z\",\n                    \"processed_at\": \"2024-01-20T19:30:00Z\"\n                }\n            ]\n        }\n    },\n    \"time\": \"2024-01-20T19:30:00Z\",\n    \"statusCode\": 200\n}"
                },
                {
                    "name": "200 Success - No Expired Requests",
                    "originalRequest": {
                        "method": "POST",
                        "header": [
                            {"key": "Authorization", "value": "Bearer admin-token"}
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{}"
                        },
                        "url": "{{base_url}}/api/services/requests/batch_expire/"
                    },
                    "status": "OK",
                    "code": 200,
                    "_postman_previewlanguage": "json",
                    "header": [
                        {"key": "Content-Type", "value": "application/json"}
                    ],
                    "cookie": [],
                    "body": "{\n    \"message\": \"No expired service requests found to process\",\n    \"data\": {\n        \"operation\": \"batch_expire\",\n        \"expired_count\": 0,\n        \"processed_at\": \"2024-01-20T19:30:00Z\",\n        \"performed_by\": \"admin1\",\n        \"admin_id\": \"admin-uuid\",\n        \"search_criteria\": {\n            \"status\": \"open\",\n            \"expires_before\": \"2024-01-20T19:30:00Z\"\n        }\n    },\n    \"time\": \"2024-01-20T19:30:00Z\",\n    \"statusCode\": 200\n}"
                },
                {
                    "name": "403 Permission Denied - Not Admin",
                    "originalRequest": {
                        "method": "POST",
                        "header": [
                            {"key": "Authorization", "value": "Bearer customer-token"}
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{}"
                        },
                        "url": "{{base_url}}/api/services/requests/batch_expire/"
                    },
                    "status": "Forbidden",
                    "code": 403,
                    "_postman_previewlanguage": "json",
                    "header": [
                        {"key": "Content-Type", "value": "application/json"}
                    ],
                    "cookie": [],
                    "body": "{\n    \"message\": \"You do not have permission to perform this action\",\n    \"data\": {\n        \"required_permission\": \"admin\",\n        \"current_user_type\": \"customer\",\n        \"action\": \"batch_expire_service_requests\",\n        \"user_id\": \"customer-uuid\"\n    },\n    \"time\": \"2024-01-20T19:30:00Z\",\n    \"statusCode\": 403\n}"
                }
            ]
        },
        {
            "name": "11. Cancel Service Request",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test('Status code is 200', function () {",
                            "    pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test('Message indicates successful cancellation', function () {",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.message).to.include('cancelled successfully');",
                            "});",
                            "",
                            "pm.test('Data contains cancellation details', function () {",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.data).to.have.property('cancellation_details');",
                            "    pm.expect(jsonData.data).to.have.property('request_info');",
                            "});"
                        ]
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    },
                    {
                        "key": "Authorization",
                        "value": "Bearer {{customer_token}}",
                        "description": "Customer (owner) or Admin authentication required"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{}"
                },
                "url": {
                    "raw": "{{base_url}}/api/services/requests/{{service_request_id}}/cancel/",
                    "host": ["{{base_url}}"],
                    "path": ["api", "services", "requests", "{{service_request_id}}", "cancel", ""]
                },
                "description": "Cancel a service request (Owner or Admin only)."
            },
            "response": [
                {
                    "name": "200 Success - Request Cancelled",
                    "originalRequest": {
                        "method": "POST",
                        "header": [
                            {"key": "Authorization", "value": "Bearer customer-token"}
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{}"
                        },
                        "url": "{{base_url}}/api/services/requests/{{service_request_id}}/cancel/"
                    },
                    "status": "OK",
                    "code": 200,
                    "_postman_previewlanguage": "json",
                    "header": [
                        {"key": "Content-Type", "value": "application/json"}
                    ],
                    "cookie": [],
                    "body": "{\n    \"message\": \"Service request cancelled successfully\",\n    \"data\": {\n        \"cancellation_details\": {\n            \"request_id\": \"request-uuid\",\n            \"request_title\": \"Need urgent plumbing help\",\n            \"previous_status\": \"open\",\n            \"new_status\": \"cancelled\",\n            \"cancelled_by\": \"customer1\",\n            \"cancelled_at\": \"2024-01-20T20:00:00Z\"\n        },\n        \"request_info\": {\n            \"customer_id\": \"customer-uuid\",\n            \"category\": \"Plumbing\",\n            \"location\": \"123 Emergency Lane\",\n            \"created_at\": \"2024-01-20T15:30:00Z\"\n        },\n        \"cancellation_impact\": {\n            \"assigned_provider\": null,\n            \"fulfilled_by_service\": null\n        }\n    },\n    \"time\": \"2024-01-20T20:00:00Z\",\n    \"statusCode\": 200\n}"
                },
                {
                    "name": "400 Bad Request - Invalid Status",
                    "originalRequest": {
                        "method": "POST",
                        "header": [
                            {"key": "Authorization", "value": "Bearer customer-token"}
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{}"
                        },
                        "url": "{{base_url}}/api/services/requests/{{service_request_id}}/cancel/"
                    },
                    "status": "Bad Request",
                    "code": 400,
                    "_postman_previewlanguage": "json",
                    "header": [
                        {"key": "Content-Type", "value": "application/json"}
                    ],
                    "cookie": [],
                    "body": "{\n    \"message\": \"Cannot cancel a request with status 'fulfilled'\",\n    \"data\": {\n        \"request_id\": \"request-uuid\",\n        \"current_status\": \"fulfilled\",\n        \"cancellable_statuses\": [\"open\", \"in_progress\"],\n        \"error_type\": \"invalid_status_for_cancellation\"\n    },\n    \"time\": \"2024-01-20T20:00:00Z\",\n    \"statusCode\": 400\n}"
                },
                {
                    "name": "403 Permission Denied - Not Owner",
                    "originalRequest": {
                        "method": "POST",
                        "header": [
                            {"key": "Authorization", "value": "Bearer other-customer-token"}
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{}"
                        },
                        "url": "{{base_url}}/api/services/requests/{{service_request_id}}/cancel/"
                    },
                    "status": "Forbidden",
                    "code": 403,
                    "_postman_previewlanguage": "json",
                    "header": [
                        {"key": "Content-Type", "value": "application/json"}
                    ],
                    "cookie": [],
                    "body": "{\n    \"message\": \"You do not have permission to cancel this request\",\n    \"data\": {\n        \"request_id\": \"request-uuid\",\n        \"owner_id\": \"owner-uuid\",\n        \"requester_id\": \"other-customer-uuid\",\n        \"error_type\": \"permission_denied\"\n    },\n    \"time\": \"2024-01-20T20:00:00Z\",\n    \"statusCode\": 403\n}"
                }
            ]
        }
    ],
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "type": "text/javascript",
                "exec": [
                    "// Set base URL if not already set",
                    "if (!pm.environment.get('base_url')) {",
                    "    pm.environment.set('base_url', 'http://localhost:8000');",
                    "}",
                    "",
                    "// Add timestamp for debugging",
                    "pm.globals.set('timestamp', new Date().toISOString());"
                ]
            }
        },
        {
            "listen": "test",
            "script": {
                "type": "text/javascript",
                "exec": [
                    "// Global test for standardized response format",
                    "pm.test('Response has standardized format', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('message');",
                    "    pm.expect(jsonData).to.have.property('data');",
                    "    pm.expect(jsonData).to.have.property('time');",
                    "    pm.expect(jsonData).to.have.property('statusCode');",
                    "});",
                    "",
                    "// Test response time",
                    "pm.test('Response time is less than 5000ms', function () {",
                    "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                    "});",
                    "",
                    "// Store response data for chaining",
                    "if (pm.response.code === 200 || pm.response.code === 201) {",
                    "    const jsonData = pm.response.json();",
                    "    ",
                    "    // Store IDs for use in other requests",
                    "    if (jsonData.data && jsonData.data.service_request && jsonData.data.service_request.id) {",
                    "        pm.environment.set('last_created_request_id', jsonData.data.service_request.id);",
                    "    }",
                    "}"
                ]
            }
        }
    ]
}